// Code generated by protoc-gen-go.
// source: rdp.proto
// DO NOT EDIT!

/*
Package rdp_messages is a generated protocol buffer package.

It is generated from these files:
	rdp.proto

It has these top-level messages:
	Column
	Row
	Event
	Transaction
	KafkaPkg
	KeyPair
	VMSMessage
	VIPProperties
*/
package rdp_messages

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DDL int32

const (
	DDL_kDDLNoChage DDL = 0
	DDL_kDDLChanged DDL = 1
)

var DDL_name = map[int32]string{
	0: "kDDLNoChage",
	1: "kDDLChanged",
}
var DDL_value = map[string]int32{
	"kDDLNoChage": 0,
	"kDDLChanged": 1,
}

func (x DDL) Enum() *DDL {
	p := new(DDL)
	*p = x
	return p
}
func (x DDL) String() string {
	return proto.EnumName(DDL_name, int32(x))
}
func (x *DDL) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DDL_value, data, "DDL")
	if err != nil {
		return err
	}
	*x = DDL(value)
	return nil
}
func (DDL) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type KafkaPkgFlag int32

const (
	KafkaPkgFlag_kKfkPkgDefault      KafkaPkgFlag = 0
	KafkaPkgFlag_kKfkPkgCompressData KafkaPkgFlag = 1
)

var KafkaPkgFlag_name = map[int32]string{
	0: "kKfkPkgDefault",
	1: "kKfkPkgCompressData",
}
var KafkaPkgFlag_value = map[string]int32{
	"kKfkPkgDefault":      0,
	"kKfkPkgCompressData": 1,
}

func (x KafkaPkgFlag) Enum() *KafkaPkgFlag {
	p := new(KafkaPkgFlag)
	*p = x
	return p
}
func (x KafkaPkgFlag) String() string {
	return proto.EnumName(KafkaPkgFlag_name, int32(x))
}
func (x *KafkaPkgFlag) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(KafkaPkgFlag_value, data, "KafkaPkgFlag")
	if err != nil {
		return err
	}
	*x = KafkaPkgFlag(value)
	return nil
}
func (KafkaPkgFlag) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// Column
type Column struct {
	// column 名称
	Name []byte `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	// column 类型：int32 varcher blob等，参见：enum_field_types
	Type []byte `protobuf:"bytes,2,req,name=type" json:"type,omitempty"`
	// column 内容
	Value      []byte  `protobuf:"bytes,3,req,name=value" json:"value,omitempty"`
	BinlogType *uint32 `protobuf:"varint,4,opt,name=binlog_type" json:"binlog_type,omitempty"`
	// 索引类型
	Key              *string `protobuf:"bytes,5,opt,name=key" json:"key,omitempty"`
	IsNull           *uint32 `protobuf:"varint,6,opt,name=is_null" json:"is_null,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Column) Reset()                    { *m = Column{} }
func (m *Column) String() string            { return proto.CompactTextString(m) }
func (*Column) ProtoMessage()               {}
func (*Column) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Column) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *Column) GetType() []byte {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *Column) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Column) GetBinlogType() uint32 {
	if m != nil && m.BinlogType != nil {
		return *m.BinlogType
	}
	return 0
}

func (m *Column) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *Column) GetIsNull() uint32 {
	if m != nil && m.IsNull != nil {
		return *m.IsNull
	}
	return 0
}

type Row struct {
	// Insert、Delete情况下，只有before
	Before []*Column `protobuf:"bytes,14,rep,name=before" json:"before,omitempty"`
	// Update情况下，before和after成对出现
	After            []*Column `protobuf:"bytes,15,rep,name=after" json:"after,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *Row) Reset()                    { *m = Row{} }
func (m *Row) String() string            { return proto.CompactTextString(m) }
func (*Row) ProtoMessage()               {}
func (*Row) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Row) GetBefore() []*Column {
	if m != nil {
		return m.Before
	}
	return nil
}

func (m *Row) GetAfter() []*Column {
	if m != nil {
		return m.After
	}
	return nil
}

type Event struct {
	DatabaseName []byte  `protobuf:"bytes,1,opt,name=database_name" json:"database_name,omitempty"`
	TableName    []byte  `protobuf:"bytes,2,opt,name=table_name" json:"table_name,omitempty"`
	EventType    *uint32 `protobuf:"varint,3,req,name=event_type" json:"event_type,omitempty"`
	SchemaId     *uint64 `protobuf:"varint,4,opt,name=schema_id" json:"schema_id,omitempty"`
	// 数据库的binlog时间
	Timestamp *uint64 `protobuf:"varint,5,req,name=timestamp" json:"timestamp,omitempty"`
	// rdp处理binlog的时间
	TimestampOfReceipt *uint64 `protobuf:"varint,6,req,name=timestamp_of_receipt" json:"timestamp_of_receipt,omitempty"`
	// 是否发生ddl变更
	Ddl *DDL `protobuf:"varint,7,opt,name=ddl,enum=rdp.messages.DDL" json:"ddl,omitempty"`
	// 在binlog文件中的位置
	Position *uint64 `protobuf:"varint,8,opt,name=position" json:"position,omitempty"`
	// 下一条binlog的位置
	NextPosition *uint64 `protobuf:"varint,9,opt,name=next_position" json:"next_position,omitempty"`
	// binlog文件名
	BinlogFileName []byte `protobuf:"bytes,10,opt,name=binlog_file_name" json:"binlog_file_name,omitempty"`
	// ServerId Long mysql 实例的唯一性ID
	ServerId *uint64 `protobuf:"varint,12,opt,name=server_id" json:"server_id,omitempty"`
	// sqlStatement String 表结构发生变化时的SQL
	SqlStatement []byte `protobuf:"bytes,13,opt,name=sql_statement" json:"sql_statement,omitempty"`
	Rows         []*Row `protobuf:"bytes,14,rep,name=rows" json:"rows,omitempty"`
	// Event原始的二进制流
	OrigBuff         []byte `protobuf:"bytes,15,opt,name=orig_buff" json:"orig_buff,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Event) GetDatabaseName() []byte {
	if m != nil {
		return m.DatabaseName
	}
	return nil
}

func (m *Event) GetTableName() []byte {
	if m != nil {
		return m.TableName
	}
	return nil
}

func (m *Event) GetEventType() uint32 {
	if m != nil && m.EventType != nil {
		return *m.EventType
	}
	return 0
}

func (m *Event) GetSchemaId() uint64 {
	if m != nil && m.SchemaId != nil {
		return *m.SchemaId
	}
	return 0
}

func (m *Event) GetTimestamp() uint64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *Event) GetTimestampOfReceipt() uint64 {
	if m != nil && m.TimestampOfReceipt != nil {
		return *m.TimestampOfReceipt
	}
	return 0
}

func (m *Event) GetDdl() DDL {
	if m != nil && m.Ddl != nil {
		return *m.Ddl
	}
	return DDL_kDDLNoChage
}

func (m *Event) GetPosition() uint64 {
	if m != nil && m.Position != nil {
		return *m.Position
	}
	return 0
}

func (m *Event) GetNextPosition() uint64 {
	if m != nil && m.NextPosition != nil {
		return *m.NextPosition
	}
	return 0
}

func (m *Event) GetBinlogFileName() []byte {
	if m != nil {
		return m.BinlogFileName
	}
	return nil
}

func (m *Event) GetServerId() uint64 {
	if m != nil && m.ServerId != nil {
		return *m.ServerId
	}
	return 0
}

func (m *Event) GetSqlStatement() []byte {
	if m != nil {
		return m.SqlStatement
	}
	return nil
}

func (m *Event) GetRows() []*Row {
	if m != nil {
		return m.Rows
	}
	return nil
}

func (m *Event) GetOrigBuff() []byte {
	if m != nil {
		return m.OrigBuff
	}
	return nil
}

// mysql Transaction 数据
type Transaction struct {
	Gtid   []byte   `protobuf:"bytes,1,req,name=gtid" json:"gtid,omitempty"`
	Seq    *uint32  `protobuf:"varint,2,req,name=seq" json:"seq,omitempty"`
	Events []*Event `protobuf:"bytes,3,rep,name=events" json:"events,omitempty"`
	// 在binlog文件中的位置
	Position *uint64 `protobuf:"varint,4,req,name=position" json:"position,omitempty"`
	// binlog文件名
	BinlogFileName []byte `protobuf:"bytes,5,req,name=binlog_file_name" json:"binlog_file_name,omitempty"`
	// 下一条binlog的位置
	NextPosition *uint64 `protobuf:"varint,6,req,name=next_position" json:"next_position,omitempty"`
	// binlog文件名
	NextBinlogFileName []byte `protobuf:"bytes,7,req,name=next_binlog_file_name" json:"next_binlog_file_name,omitempty"`
	// group commit id
	LastCommitted *int64 `protobuf:"varint,8,opt,name=last_committed" json:"last_committed,omitempty"`
	// group commit sequence number
	SequenceNumber   *int64 `protobuf:"varint,9,opt,name=sequence_number" json:"sequence_number,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Transaction) GetGtid() []byte {
	if m != nil {
		return m.Gtid
	}
	return nil
}

func (m *Transaction) GetSeq() uint32 {
	if m != nil && m.Seq != nil {
		return *m.Seq
	}
	return 0
}

func (m *Transaction) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *Transaction) GetPosition() uint64 {
	if m != nil && m.Position != nil {
		return *m.Position
	}
	return 0
}

func (m *Transaction) GetBinlogFileName() []byte {
	if m != nil {
		return m.BinlogFileName
	}
	return nil
}

func (m *Transaction) GetNextPosition() uint64 {
	if m != nil && m.NextPosition != nil {
		return *m.NextPosition
	}
	return 0
}

func (m *Transaction) GetNextBinlogFileName() []byte {
	if m != nil {
		return m.NextBinlogFileName
	}
	return nil
}

func (m *Transaction) GetLastCommitted() int64 {
	if m != nil && m.LastCommitted != nil {
		return *m.LastCommitted
	}
	return 0
}

func (m *Transaction) GetSequenceNumber() int64 {
	if m != nil && m.SequenceNumber != nil {
		return *m.SequenceNumber
	}
	return 0
}

// 写入kafka数据
type KafkaPkg struct {
	// kafka 数据版本号
	Epoch *uint64 `protobuf:"varint,1,req,name=epoch" json:"epoch,omitempty"`
	// 事务序号
	TransSeqNo *uint64 `protobuf:"varint,2,req,name=trans_seq_no" json:"trans_seq_no,omitempty"`
	// 事务GTID
	Gtid []byte `protobuf:"bytes,3,req,name=gtid" json:"gtid,omitempty"`
	// 分包标识
	// 0: 独立数据，没有分包操作
	// 1: 分包数据，非最后分包
	// 2: 分包数据，最后分包
	SplitFlag *int32 `protobuf:"varint,4,req,name=split_flag" json:"split_flag,omitempty"`
	// 分包序号
	SeqNo *uint64 `protobuf:"varint,5,req,name=seq_no" json:"seq_no,omitempty"`
	// 数据
	Data []byte `protobuf:"bytes,6,req,name=data" json:"data,omitempty"`
	// Transaction数据校验值
	// 在分包标识为0或者2的时候才存在
	Checksum *int64 `protobuf:"varint,7,opt,name=checksum" json:"checksum,omitempty"`
	// 标识字段
	Flag *uint32 `protobuf:"varint,8,opt,name=flag" json:"flag,omitempty"`
	// 序列后后,压缩前Transaction的长度
	SourceDataLen    *uint64 `protobuf:"varint,9,opt,name=source_data_len" json:"source_data_len,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *KafkaPkg) Reset()                    { *m = KafkaPkg{} }
func (m *KafkaPkg) String() string            { return proto.CompactTextString(m) }
func (*KafkaPkg) ProtoMessage()               {}
func (*KafkaPkg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *KafkaPkg) GetEpoch() uint64 {
	if m != nil && m.Epoch != nil {
		return *m.Epoch
	}
	return 0
}

func (m *KafkaPkg) GetTransSeqNo() uint64 {
	if m != nil && m.TransSeqNo != nil {
		return *m.TransSeqNo
	}
	return 0
}

func (m *KafkaPkg) GetGtid() []byte {
	if m != nil {
		return m.Gtid
	}
	return nil
}

func (m *KafkaPkg) GetSplitFlag() int32 {
	if m != nil && m.SplitFlag != nil {
		return *m.SplitFlag
	}
	return 0
}

func (m *KafkaPkg) GetSeqNo() uint64 {
	if m != nil && m.SeqNo != nil {
		return *m.SeqNo
	}
	return 0
}

func (m *KafkaPkg) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *KafkaPkg) GetChecksum() int64 {
	if m != nil && m.Checksum != nil {
		return *m.Checksum
	}
	return 0
}

func (m *KafkaPkg) GetFlag() uint32 {
	if m != nil && m.Flag != nil {
		return *m.Flag
	}
	return 0
}

func (m *KafkaPkg) GetSourceDataLen() uint64 {
	if m != nil && m.SourceDataLen != nil {
		return *m.SourceDataLen
	}
	return 0
}

// **************VMS Protobuf********************
type KeyPair struct {
	Key              *string `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Value            *string `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *KeyPair) Reset()                    { *m = KeyPair{} }
func (m *KeyPair) String() string            { return proto.CompactTextString(m) }
func (*KeyPair) ProtoMessage()               {}
func (*KeyPair) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *KeyPair) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *KeyPair) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type VMSMessage struct {
	MessageId        *string    `protobuf:"bytes,1,opt,name=messageId" json:"messageId,omitempty"`
	Weight           *uint64    `protobuf:"varint,2,opt,name=weight" json:"weight,omitempty"`
	Ttl              *uint64    `protobuf:"varint,3,opt,name=ttl" json:"ttl,omitempty"`
	RoutingKeys      []string   `protobuf:"bytes,4,rep,name=routingKeys" json:"routingKeys,omitempty"`
	Properties       []*KeyPair `protobuf:"bytes,5,rep,name=properties" json:"properties,omitempty"`
	Payload          []byte     `protobuf:"bytes,6,req,name=payload" json:"payload,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *VMSMessage) Reset()                    { *m = VMSMessage{} }
func (m *VMSMessage) String() string            { return proto.CompactTextString(m) }
func (*VMSMessage) ProtoMessage()               {}
func (*VMSMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *VMSMessage) GetMessageId() string {
	if m != nil && m.MessageId != nil {
		return *m.MessageId
	}
	return ""
}

func (m *VMSMessage) GetWeight() uint64 {
	if m != nil && m.Weight != nil {
		return *m.Weight
	}
	return 0
}

func (m *VMSMessage) GetTtl() uint64 {
	if m != nil && m.Ttl != nil {
		return *m.Ttl
	}
	return 0
}

func (m *VMSMessage) GetRoutingKeys() []string {
	if m != nil {
		return m.RoutingKeys
	}
	return nil
}

func (m *VMSMessage) GetProperties() []*KeyPair {
	if m != nil {
		return m.Properties
	}
	return nil
}

func (m *VMSMessage) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type VIPProperties struct {
	Version          *string    `protobuf:"bytes,1,req,name=version" json:"version,omitempty"`
	Properties       []*KeyPair `protobuf:"bytes,2,rep,name=properties" json:"properties,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *VIPProperties) Reset()                    { *m = VIPProperties{} }
func (m *VIPProperties) String() string            { return proto.CompactTextString(m) }
func (*VIPProperties) ProtoMessage()               {}
func (*VIPProperties) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *VIPProperties) GetVersion() string {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return ""
}

func (m *VIPProperties) GetProperties() []*KeyPair {
	if m != nil {
		return m.Properties
	}
	return nil
}

func init() {
	proto.RegisterType((*Column)(nil), "rdp.messages.Column")
	proto.RegisterType((*Row)(nil), "rdp.messages.Row")
	proto.RegisterType((*Event)(nil), "rdp.messages.Event")
	proto.RegisterType((*Transaction)(nil), "rdp.messages.Transaction")
	proto.RegisterType((*KafkaPkg)(nil), "rdp.messages.KafkaPkg")
	proto.RegisterType((*KeyPair)(nil), "rdp.messages.KeyPair")
	proto.RegisterType((*VMSMessage)(nil), "rdp.messages.VMSMessage")
	proto.RegisterType((*VIPProperties)(nil), "rdp.messages.VIPProperties")
	proto.RegisterEnum("rdp.messages.DDL", DDL_name, DDL_value)
	proto.RegisterEnum("rdp.messages.KafkaPkgFlag", KafkaPkgFlag_name, KafkaPkgFlag_value)
}

func init() { proto.RegisterFile("rdp.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 760 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0xcd, 0x8e, 0xdb, 0x36,
	0x10, 0x8e, 0x2c, 0xc9, 0x5e, 0x8d, 0x7f, 0x97, 0xbb, 0xdb, 0xb0, 0x40, 0x7f, 0x0c, 0xa7, 0x45,
	0xdd, 0x1c, 0xf6, 0x90, 0x6b, 0x6f, 0x59, 0xb7, 0x40, 0xe0, 0xa4, 0x30, 0xd2, 0x22, 0x57, 0x82,
	0x96, 0x46, 0x32, 0x61, 0x4a, 0xd4, 0x92, 0xd4, 0x6e, 0xfd, 0x10, 0x7d, 0x8f, 0xbe, 0x4b, 0x5f,
	0xa2, 0x8f, 0x52, 0x90, 0x96, 0xdc, 0xb8, 0xdb, 0xe6, 0x66, 0x8e, 0xf8, 0x0d, 0xbf, 0x9f, 0x19,
	0x43, 0xa2, 0xb3, 0xfa, 0xb6, 0xd6, 0xca, 0x2a, 0x32, 0x72, 0x3f, 0x4b, 0x34, 0x86, 0x17, 0x68,
	0x16, 0x39, 0xf4, 0xef, 0x94, 0x6c, 0xca, 0x8a, 0x8c, 0x20, 0xaa, 0x78, 0x89, 0x34, 0x98, 0xf7,
	0x96, 0x23, 0x77, 0xb2, 0x87, 0x1a, 0x69, 0xcf, 0x9f, 0xc6, 0x10, 0x3f, 0x70, 0xd9, 0x20, 0x0d,
	0xfd, 0xf1, 0x0a, 0x86, 0x5b, 0x51, 0x49, 0x55, 0x30, 0x7f, 0x27, 0x9a, 0x07, 0xcb, 0x31, 0x19,
	0x42, 0xb8, 0xc7, 0x03, 0x8d, 0xe7, 0xc1, 0x32, 0x21, 0x53, 0x18, 0x08, 0xc3, 0xaa, 0x46, 0x4a,
	0xda, 0x77, 0x5f, 0x17, 0x1b, 0x08, 0xdf, 0xab, 0x47, 0xf2, 0x0d, 0xf4, 0xb7, 0x98, 0x2b, 0x8d,
	0x74, 0x32, 0x0f, 0x97, 0xc3, 0x57, 0xd7, 0xb7, 0x1f, 0xb3, 0xb9, 0x6d, 0xa9, 0xbc, 0x80, 0x98,
	0xe7, 0x16, 0x35, 0x9d, 0xfe, 0xff, 0xa5, 0xc5, 0x9f, 0x3d, 0x88, 0x7f, 0x7c, 0xc0, 0xca, 0x92,
	0x1b, 0x18, 0x67, 0xdc, 0xf2, 0x2d, 0x37, 0xc8, 0x5a, 0x09, 0xc1, 0x72, 0x44, 0x08, 0x80, 0xe5,
	0x5b, 0xd9, 0xd6, 0x7a, 0x5d, 0x0d, 0x1d, 0xe6, 0x48, 0xdc, 0xa9, 0x19, 0x93, 0x4b, 0x48, 0x4c,
	0xba, 0xc3, 0x92, 0x33, 0x91, 0x79, 0x2d, 0x91, 0x2b, 0x59, 0x51, 0xa2, 0xb1, 0xbc, 0xac, 0x69,
	0x3c, 0xef, 0x2d, 0x23, 0xf2, 0x05, 0x5c, 0x9f, 0x4a, 0x4c, 0xe5, 0x4c, 0x63, 0x8a, 0xa2, 0xb6,
	0xb4, 0xef, 0xbf, 0x7e, 0x05, 0x61, 0x96, 0x49, 0x3a, 0x98, 0x07, 0xcb, 0xc9, 0xab, 0xcb, 0x73,
	0xbe, 0xab, 0xd5, 0x5b, 0x32, 0x83, 0x8b, 0x5a, 0x19, 0x61, 0x85, 0xaa, 0xe8, 0x85, 0x7f, 0xe2,
	0x06, 0xc6, 0x15, 0xfe, 0x66, 0xd9, 0xa9, 0x9c, 0xf8, 0x32, 0x85, 0x59, 0x6b, 0x6d, 0x2e, 0x3a,
	0xea, 0xe0, 0xa9, 0x3b, 0x9a, 0xa8, 0x1f, 0x50, 0x3b, 0x9a, 0xa3, 0xae, 0x87, 0xb9, 0x97, 0xcc,
	0x58, 0x6e, 0xb1, 0xc4, 0xca, 0xd2, 0xb1, 0xbf, 0xf9, 0x35, 0x44, 0x5a, 0x3d, 0x9a, 0xd6, 0xe2,
	0x7f, 0xb1, 0x71, 0x29, 0x5c, 0x42, 0xa2, 0xb4, 0x28, 0xd8, 0xb6, 0xc9, 0x73, 0x3a, 0x75, 0x98,
	0xc5, 0x5f, 0x01, 0x0c, 0x7f, 0xd5, 0xbc, 0x32, 0x3c, 0x75, 0x6c, 0x5c, 0xfe, 0x85, 0x15, 0x59,
	0x3b, 0x0d, 0x43, 0x08, 0x0d, 0xde, 0xfb, 0x61, 0x18, 0x93, 0x17, 0xd0, 0xf7, 0x1e, 0x1a, 0x1a,
	0xfa, 0x07, 0xae, 0xce, 0x1f, 0x38, 0x66, 0xf2, 0xb1, 0xe0, 0xc8, 0x5b, 0xf4, 0x5f, 0xca, 0x62,
	0xdf, 0xfd, 0x89, 0x15, 0x47, 0x4f, 0xbf, 0x84, 0x1b, 0x5f, 0x7e, 0x82, 0x1a, 0x78, 0xd4, 0x67,
	0x30, 0x91, 0xdc, 0x58, 0x96, 0xaa, 0xb2, 0x14, 0xd6, 0x62, 0xe6, 0x8d, 0x0d, 0xc9, 0x73, 0x98,
	0x1a, 0xbc, 0x6f, 0xb0, 0x4a, 0x91, 0x55, 0x4d, 0xb9, 0x45, 0xed, 0xad, 0x0d, 0x17, 0x7f, 0x04,
	0x70, 0xb1, 0xe6, 0xf9, 0x9e, 0x6f, 0xf6, 0x85, 0x9b, 0x68, 0xac, 0x55, 0xba, 0xf3, 0x02, 0x23,
	0x72, 0x0d, 0x23, 0xeb, 0xd4, 0x33, 0x83, 0xf7, 0xac, 0x52, 0x5e, 0x69, 0x74, 0x32, 0xe1, 0x38,
	0xf5, 0x04, 0xc0, 0xd4, 0x52, 0x58, 0x96, 0x4b, 0x5e, 0x78, 0x51, 0x31, 0x99, 0x40, 0xbf, 0x45,
	0xc4, 0x1d, 0xc2, 0x8d, 0xa2, 0x57, 0x30, 0x72, 0x26, 0xa4, 0x3b, 0x4c, 0xf7, 0xa6, 0x29, 0xfd,
	0x68, 0x84, 0xee, 0xbb, 0x47, 0x5f, 0xf8, 0x95, 0x71, 0x54, 0x55, 0xa3, 0x53, 0x64, 0x0e, 0xc4,
	0x24, 0xb6, 0x53, 0xb0, 0xf8, 0x16, 0x06, 0x6b, 0x3c, 0x6c, 0xb8, 0xd0, 0xdd, 0x5a, 0x39, 0x9a,
	0xc9, 0x3f, 0x7b, 0xe8, 0xf8, 0x25, 0x8b, 0xdf, 0x03, 0x80, 0x0f, 0xef, 0x7e, 0x79, 0x77, 0xb4,
	0xde, 0xc5, 0xda, 0xa6, 0xf0, 0x26, 0xf3, 0x3b, 0x90, 0x38, 0x7e, 0x8f, 0x28, 0x8a, 0x9d, 0xf5,
	0xf3, 0x1f, 0xb9, 0x6e, 0xd6, 0x4a, 0x1a, 0xfa, 0xc3, 0x15, 0x0c, 0xb5, 0x6a, 0xac, 0xa8, 0x8a,
	0x35, 0x1e, 0x0c, 0x8d, 0xe6, 0xe1, 0x32, 0x21, 0xdf, 0x03, 0xd4, 0x5a, 0xd5, 0xa8, 0xad, 0x40,
	0x43, 0x63, 0x9f, 0xf0, 0xcd, 0x79, 0xc2, 0x1d, 0xb5, 0x29, 0x0c, 0x6a, 0x7e, 0x90, 0x8a, 0x67,
	0x47, 0xbd, 0x8b, 0x35, 0x8c, 0x3f, 0xbc, 0xd9, 0x6c, 0x4e, 0x70, 0x77, 0xe3, 0x01, 0xb5, 0x71,
	0x99, 0x1e, 0x05, 0x9c, 0x77, 0xef, 0x7d, 0xa2, 0xfb, 0xcb, 0xef, 0x20, 0x74, 0x9b, 0x33, 0x85,
	0xe1, 0x7e, 0xb5, 0x7a, 0xfb, 0xb3, 0xba, 0xdb, 0xf1, 0x02, 0x67, 0xcf, 0xba, 0xc2, 0xdd, 0x8e,
	0x57, 0x05, 0x66, 0xb3, 0xe0, 0xe5, 0x0f, 0x30, 0xea, 0x62, 0xfd, 0x49, 0xf2, 0x82, 0x10, 0x98,
	0xec, 0xd7, 0xf9, 0x7e, 0xb3, 0x2f, 0x56, 0x98, 0xf3, 0x46, 0xda, 0xd9, 0x33, 0xf2, 0x1c, 0xae,
	0xda, 0xda, 0x9d, 0x2a, 0x6b, 0x8d, 0xc6, 0xac, 0xb8, 0xe5, 0xb3, 0xe0, 0xf5, 0xe7, 0x70, 0xf6,
	0x7f, 0xf8, 0x3a, 0x79, 0xbf, 0x72, 0x02, 0xb6, 0x4d, 0xfe, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x6c, 0x6f, 0xac, 0x5c, 0x34, 0x05, 0x00, 0x00,
}
